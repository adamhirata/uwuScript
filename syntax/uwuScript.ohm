uwuScript {
    Program     = newline* Statement+ newline*
    Statement   = SimpleStmt newline+												                        -- simple
                | "wile" "(" Exp ")" Block                                          -- while
                | "if" "(" Exp ")" Block
                  ("ewse if" "(" Exp ")" Block)*
                  ("ewse" Block)?                                                   -- if                        
                | "fow" id "in" Exp"..."Exp Block                                   -- for
                | Exp "?" Exp "ewse" Exp                                            -- ternary
                | (Type | "void") id "(" Params ")" Block                           -- funcdec
    SimpleStmt  = Type id "=" Exp                                                   -- vardec
                | VarExp "=" Exps                                                   -- assignment
                | "bweak"                                                           -- break
                | "retuwn" Exp?                                                     -- return
                | Call
                | Exp
    Block       = "uwu" SimpleStmt? "owo" newline*			                            -- tiny
                | "uwu" newline+ Statement* "owo" newline*   						            -- large
    Exp         = Exp "||" Exp1														                          -- or
                | Exp "&&" Exp1														                          -- and
                | Exp1															
    Exp1        = Exp2 relop Exp2													                          -- binary
                | Exp2
    Exp2        = Exp2 addop Exp3													                          -- binary
                | Exp3
    Exp3        = Exp3 mulop Exp4													                          -- binary
                | Exp4
    Exp4        = prefixop Exp5														                          -- unary
                | Exp5
    Exp5        = numlit
                | boollit  
                | strlit
                | nulllit
                | "[" ListOf<Exp, ","> "]"                                          -- array
                | "{" ListOf<KeyValPair, ","> "}"                                   -- dictionary
                | "(" Exp ")"                                                       -- parens
                | Call
                | VarExp
    keyword     = ("uwu" | "owo" | "?" | "wile" | "if" | "ewse" | "twue" | "fawse" | "retuwn" | "bweak" | "fow" | "null" | "||" | "&&" | "in" | "void" ) ~idrest
    id          = ~keyword ("_" | letter) idrest*
    idrest      =  "_" | alnum
    numlit      = digit+ ("." digit)? digit*
    boollit     = "twue" | "fawse"
    strlit      = "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""
    nulllit     = "null" 
    Call        = VarExp "(" Args ")"
    Param		    = Type id ("=" Exp)?
    Params      = ListOf<Param, ",">
    Arg         = (id ":")? Exp
    Args        = ListOf<Arg, ",">
    Exps        =  NonemptyListOf<Exp, ",">
    VarExp      =  VarExp "[" Exp "]"                                                -- subscripted
                |  id                                                                -- simple
    VarExps     =  NonemptyListOf<VarExp, ",">
    Type        = ( NumType | StringType | BooleanType | ArrayType | DictType )
    NumType     = "Numbwer"
    StringType  = "Stwing"
    BooleanType = "Boowean" | "Boow"
    ArrayType   = "Awway<" Type ">" | "Aww<" Type ">"
    DictType    = "Dict<" Type "to" Type ">" | "Dictionawy<" Type "to" Type ">"
    KeyValPair  = Exp "to" Exp
    indent      = "⇨"
    dedent      = "⇦"
    addop       =  "+" | "-"
    relop       =  "==" | "!=" | "<=" | "<" |  ">=" | ">" 
    mulop       =  "*" |  "/" | "%"
    prefixop    =  "!" | "-"
    newline     = "\n"+
    space      	:=  " " | "\t" | comment
    escape      = "\\" ("\\" | "n" | "\"")											                    -- simple
                | "\\u{" hexDigit+ "}"												                      -- codepoint
    comment     = ("(*≧ω≦*)" | "(づ ◕‿◕ )づ" | "(ﾉﾟ▽ﾟ)ﾉ") (~"\n" any)*						-- single
                | "(╯°益°)╯彡┻━┻" (~"┬─┬ノ( º _ ºノ)" any)* "┬─┬ノ( º _ ºノ)"   	   -- multi
}